/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['collections/month.js']) {
  _$jscoverage['collections/month.js'] = [];
  _$jscoverage['collections/month.js'][1] = 0;
  _$jscoverage['collections/month.js'][4] = 0;
  _$jscoverage['collections/month.js'][5] = 0;
  _$jscoverage['collections/month.js'][15] = 0;
  _$jscoverage['collections/month.js'][17] = 0;
  _$jscoverage['collections/month.js'][18] = 0;
  _$jscoverage['collections/month.js'][23] = 0;
  _$jscoverage['collections/month.js'][27] = 0;
  _$jscoverage['collections/month.js'][28] = 0;
  _$jscoverage['collections/month.js'][35] = 0;
  _$jscoverage['collections/month.js'][36] = 0;
  _$jscoverage['collections/month.js'][37] = 0;
}
_$jscoverage['collections/month.js'].source = ["define<span class=\"k\">([</span>","  <span class=\"s\">'backbone'</span><span class=\"k\">,</span> <span class=\"s\">'localstorage'</span><span class=\"k\">,</span> <span class=\"s\">'utils'</span><span class=\"k\">,</span> <span class=\"s\">'models/day'</span>","<span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>Backbone<span class=\"k\">,</span> Store<span class=\"k\">,</span> Utils<span class=\"k\">,</span> Day<span class=\"k\">)</span><span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span>year<span class=\"k\">,</span> month<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> Backbone<span class=\"k\">.</span>Collection<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>","      localStorage<span class=\"k\">:</span> <span class=\"k\">new</span> Store<span class=\"k\">(</span> year <span class=\"k\">+</span><span class=\"s\">'-'</span><span class=\"k\">+</span> month <span class=\"k\">),</span> ","      model<span class=\"k\">:</span> Day<span class=\"k\">,</span>","","      options<span class=\"k\">:</span> <span class=\"k\">{</span>","        year<span class=\"k\">:</span> year<span class=\"k\">,</span>","        month<span class=\"k\">:</span> month","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      populate<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>fetch<span class=\"k\">();</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>isEmpty<span class=\"k\">()</span> <span class=\"k\">)</span><span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>fillMonth<span class=\"k\">();</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      fillMonth<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> l <span class=\"k\">=</span> <span class=\"k\">[],</span> last <span class=\"k\">=</span> Utils<span class=\"k\">.</span>getLastDay<span class=\"k\">(</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>year<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>month","        <span class=\"k\">);</span>","","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;=</span> last<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span><span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>create<span class=\"k\">(</span><span class=\"k\">{</span> ","            date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">(</span> year<span class=\"k\">,</span> <span class=\"k\">(</span> month <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">),</span> i <span class=\"k\">)</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      today<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> d <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">();</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>find<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">)</span><span class=\"k\">{</span>","          <span class=\"k\">return</span> Utils<span class=\"k\">.</span>isSameDay<span class=\"k\">(</span> d<span class=\"k\">,</span> model<span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'date'</span><span class=\"k\">)</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['collections/month.js'][1]++;
define(["backbone", "localstorage", "utils", "models/day"], (function (Backbone, Store, Utils, Day) {
  _$jscoverage['collections/month.js'][4]++;
  return (function (year, month) {
  _$jscoverage['collections/month.js'][5]++;
  return Backbone.Collection.extend({localStorage: new Store((year + "-" + month)), model: Day, options: {year: year, month: month}, populate: (function () {
  _$jscoverage['collections/month.js'][15]++;
  this.fetch();
  _$jscoverage['collections/month.js'][17]++;
  if (this.isEmpty()) {
    _$jscoverage['collections/month.js'][18]++;
    this.fillMonth();
  }
}), fillMonth: (function () {
  _$jscoverage['collections/month.js'][23]++;
  var l = [], last = Utils.getLastDay(this.options.year, this.options.month);
  _$jscoverage['collections/month.js'][27]++;
  for (var i = 1; (i <= last); (i++)) {
    _$jscoverage['collections/month.js'][28]++;
    this.create({date: new Date(year, (month - 1), i)});
}
}), today: (function () {
  _$jscoverage['collections/month.js'][35]++;
  var d = new Date();
  _$jscoverage['collections/month.js'][36]++;
  return this.find((function (model) {
  _$jscoverage['collections/month.js'][37]++;
  return Utils.isSameDay(d, model.get("date"));
}));
})});
});
}));
