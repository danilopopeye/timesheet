/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['models/day.js']) {
  _$jscoverage['models/day.js'] = [];
  _$jscoverage['models/day.js'][1] = 0;
  _$jscoverage['models/day.js'][2] = 0;
  _$jscoverage['models/day.js'][13] = 0;
  _$jscoverage['models/day.js'][17] = 0;
  _$jscoverage['models/day.js'][21] = 0;
  _$jscoverage['models/day.js'][22] = 0;
  _$jscoverage['models/day.js'][25] = 0;
  _$jscoverage['models/day.js'][26] = 0;
  _$jscoverage['models/day.js'][31] = 0;
  _$jscoverage['models/day.js'][33] = 0;
}
_$jscoverage['models/day.js'].source = ["define<span class=\"k\">([</span> <span class=\"s\">'backbone'</span><span class=\"k\">,</span> <span class=\"s\">'utils'</span><span class=\"k\">,</span> <span class=\"s\">'calculator'</span> <span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>Backbone<span class=\"k\">,</span> Utils<span class=\"k\">,</span> Calc<span class=\"k\">)</span><span class=\"k\">{</span>","  <span class=\"k\">return</span> Backbone<span class=\"k\">.</span>Model<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>","    defaults<span class=\"k\">:</span> <span class=\"k\">{</span>","      date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">,</span>","      entrance<span class=\"k\">:</span> <span class=\"s\">'--:--'</span><span class=\"k\">,</span>","      minimum<span class=\"k\">:</span> <span class=\"s\">'--:--'</span><span class=\"k\">,</span>","      regular<span class=\"k\">:</span> <span class=\"s\">'--:--'</span><span class=\"k\">,</span>","      maximum<span class=\"k\">:</span> <span class=\"s\">'--:--'</span><span class=\"k\">,</span>","      exit<span class=\"k\">:</span> <span class=\"s\">'--:--'</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    initialize<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'change:entrance'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>calculate<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    today<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","      <span class=\"k\">return</span> Utils<span class=\"k\">.</span>isSameDay<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'date'</span><span class=\"k\">),</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    validate<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>attr<span class=\"k\">,</span> errors<span class=\"k\">)</span><span class=\"k\">{</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span> Utils<span class=\"k\">.</span>isValidHour<span class=\"k\">(</span> attr<span class=\"k\">.</span>entrance <span class=\"k\">)</span> <span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">\"The entrance must be a valid hour ( hh:mm )\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span> Utils<span class=\"k\">.</span>isValidHour<span class=\"k\">(</span> attr<span class=\"k\">.</span>exit <span class=\"k\">)</span> <span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">\"The exit must be a valid hour ( hh:mm )\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    calculate<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","      <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'entrance'</span><span class=\"k\">);</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>save<span class=\"k\">(</span><span class=\"k\">{</span>","        regular<span class=\"k\">:</span> Calc<span class=\"k\">.</span>regularTime<span class=\"k\">(</span> value <span class=\"k\">),</span> ","        minimum<span class=\"k\">:</span> Calc<span class=\"k\">.</span>minTime<span class=\"k\">(</span> value <span class=\"k\">),</span> ","        maximum<span class=\"k\">:</span> Calc<span class=\"k\">.</span>maxTime<span class=\"k\">(</span> value <span class=\"k\">)</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['models/day.js'][1]++;
define(["backbone", "utils", "calculator"], (function (Backbone, Utils, Calc) {
  _$jscoverage['models/day.js'][2]++;
  return Backbone.Model.extend({defaults: {date: new Date(), entrance: "--:--", minimum: "--:--", regular: "--:--", maximum: "--:--", exit: "--:--"}, initialize: (function () {
  _$jscoverage['models/day.js'][13]++;
  this.on("change:entrance", this.calculate, this);
}), today: (function () {
  _$jscoverage['models/day.js'][17]++;
  return Utils.isSameDay(this.get("date"), new Date());
}), validate: (function (attr, errors) {
  _$jscoverage['models/day.js'][21]++;
  if ((! Utils.isValidHour(attr.entrance))) {
    _$jscoverage['models/day.js'][22]++;
    return "The entrance must be a valid hour ( hh:mm )";
  }
  _$jscoverage['models/day.js'][25]++;
  if ((! Utils.isValidHour(attr.exit))) {
    _$jscoverage['models/day.js'][26]++;
    return "The exit must be a valid hour ( hh:mm )";
  }
}), calculate: (function () {
  _$jscoverage['models/day.js'][31]++;
  var value = this.get("entrance");
  _$jscoverage['models/day.js'][33]++;
  this.save({regular: Calc.regularTime(value), minimum: Calc.minTime(value), maximum: Calc.maxTime(value)});
})});
}));
